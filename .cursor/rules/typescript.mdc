# Reglas de TypeScript para Pinwheel Astro

## Tipado Estricto

### NO uses `any`
- **Prohibido**: `any` sin justificación documentada
- **Alternativas**: Usa tipos específicos o `unknown` si es necesario
- **Justificación**: Documenta por qué usas `unknown` en comentarios

```ts
// ❌ Incorrecto
function processData(data: any) { ... }

// ✅ Correcto
function processData(data: unknown) { ... }
// Usamos unknown porque el tipo de entrada puede variar según el contexto
```

### Props en Componentes Astro
- **Siempre define interfaces**: `interface Props` para todos los componentes
- **Desestructuración con defaults**: Usa valores por defecto apropiados
- **Tipos específicos**: Evita tipos genéricos innecesarios

```astro
---
interface Props {
  title: string;
  description?: string;
  featured?: boolean;
  tags: string[];
  publishDate: Date;
}

const { 
  title, 
  description = "Sin descripción", 
  featured = false,
  tags = [],
  publishDate 
} = Astro.props;
---
```

### Content Collections
- **Usa tipos apropiados**: `CollectionEntry<"collection">` para props de entrada
- **Tipado de datos**: Accede a `entry.data` con tipos correctos
- **Validación**: Confirma que los datos existen antes de usarlos

```ts
import type { CollectionEntry } from "astro:content";

interface Props {
  post: CollectionEntry<"blog">;
}

// Acceso tipado a los datos
const { title, description, pubDate } = post.data;
```

## Importaciones y Módulos

### Extensiones de Archivo
- **TypeScript imports**: Incluye `.js` para archivos TypeScript importados
- **Astro imports**: No incluyas extensión para archivos `.astro`

```ts
// ✅ Correcto para archivos .ts/.tsx
import { markdownify, plainify } from "@/lib/utils/textConverter.js";
import type { CollectionEntry } from "astro:content";

// ✅ Correcto para archivos .astro
import BaseLayout from "@/layouts/Base.astro";
```

### Agrupación de Importaciones
- **Orden de importaciones**:
  1. Tipos y interfaces (`import type`)
  2. Utilidades y helpers
  3. Componentes y layouts
  4. Dependencias externas

```ts
// 1. Tipos
import type { CollectionEntry } from "astro:content";
import type { ImageMetadata } from "astro:assets";

// 2. Utilidades
import { markdownify, plainify } from "@/lib/utils/textConverter.js";
import { formatDate } from "@/lib/utils/dateFormatter.js";

// 3. Componentes
import BaseLayout from "@/layouts/Base.astro";
import BlogCard from "@/components/blog/BlogCard.astro";

// 4. Dependencias externas
import { z } from "zod";
```

### Re-exportaciones
- **Evita exportaciones masivas**: No uses `export *`
- **Exportaciones específicas**: Nombra cada exportación
- **Barrel exports**: Usa archivos index para agrupar exportaciones

```ts
// ❌ Incorrecto
export * from "./utils";

// ✅ Correcto
export { markdownify, plainify } from "./textConverter.js";
export { formatDate, parseDate } from "./dateFormatter.js";
```

## Funciones y Métodos

### Tipos de Retorno
- **Siempre explícitos**: Define tipos de retorno para funciones exportadas
- **Async functions**: Usa `Promise<T>` para funciones asíncronas
- **Void functions**: Especifica `void` para funciones sin retorno

```ts
// ✅ Correcto
export function formatDate(date: Date): string {
  return date.toLocaleDateString("es-ES");
}

export async function fetchPosts(): Promise<CollectionEntry<"blog">[]> {
  return await getCollection("blog");
}

export function logMessage(message: string): void {
  console.log(message);
}
```

### Parámetros Opcionales
- **Valores por defecto**: Usa valores por defecto apropiados
- **Union types**: Usa `| undefined` para parámetros opcionales
- **Destructuring**: Desestructura con valores por defecto

```ts
interface ConfigOptions {
  theme?: "light" | "dark";
  language?: string;
  debug?: boolean;
}

function createConfig(options: ConfigOptions = {}) {
  const { 
    theme = "light", 
    language = "es", 
    debug = false 
  } = options;
  
  return { theme, language, debug };
}
```

## Manejo de Errores

### Try-Catch con Tipado
- **Tipos de error**: Define tipos específicos para errores
- **Error handling**: Usa tipos apropiados en bloques catch
- **Custom errors**: Crea clases de error personalizadas cuando sea necesario

```ts
interface ValidationError {
  field: string;
  message: string;
  code: string;
}

function validateData(data: unknown): data is ValidData {
  try {
    // Validación
    return true;
  } catch (error) {
    if (error instanceof Error) {
      console.error("Error de validación:", error.message);
    }
    return false;
  }
}
```

### Type Guards
- **Validación de tipos**: Usa type guards para validar tipos en runtime
- **Narrowing**: Reduce tipos de union a tipos específicos
- **Reutilización**: Crea type guards reutilizables

```ts
function isString(value: unknown): value is string {
  return typeof value === "string";
}

function isNumber(value: unknown): value is number {
  return typeof value === "number" && !isNaN(value);
}

function processValue(value: unknown) {
  if (isString(value)) {
    // TypeScript sabe que value es string aquí
    return value.toUpperCase();
  }
  
  if (isNumber(value)) {
    // TypeScript sabe que value es number aquí
    return value.toFixed(2);
  }
  
  throw new Error("Tipo no soportado");
}
```

## Configuración de TypeScript

### tsconfig.json
- **Configuración estricta**: Usa `"extends": "astro/tsconfigs/strict"`
- **Alias de paths**: Configura alias para importaciones limpias
- **Target moderno**: Usa ES2022 o superior para compatibilidad

```json
{
  "extends": "astro/tsconfigs/strict",
  "compilerOptions": {
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@/components/*": ["src/layouts/components/*"],
      "@/partials/*": ["src/layouts/partials/*"],
      "@/shortcodes/*": ["src/layouts/shortcodes/*"]
    }
  }
}
```

### Verificación de Tipos
- **Pre-commit**: Ejecuta `pnpm check` antes de cada commit
- **Build-time**: Los errores de tipo deben resolverse antes del build
- **IDE integration**: Usa extensiones de TypeScript en tu editor

## Antipatrones a Evitar

### ❌ Suprimir Errores
```ts
// ❌ Incorrecto - Suprime errores de tipo
// @ts-ignore
const result: any = processData(input);

// ✅ Correcto - Resuelve el problema de tipo
const result = processData(input) as ProcessedData;
```

### ❌ Props Sin Tipar
```ts
// ❌ Incorrecto - Props sin interface
export default function Component(props) { ... }

// ✅ Correcto - Props tipadas
interface Props {
  title: string;
  content: string;
}

export default function Component({ title, content }: Props) { ... }
```

### ❌ Mutaciones de Props
```ts
// ❌ Incorrecto - Mutar props de solo lectura
function processProps(props: Readonly<Props>) {
  props.title = "Nuevo título"; // Error!
}

// ✅ Correcto - Crear nueva instancia
function processProps(props: Readonly<Props>) {
  return { ...props, title: "Nuevo título" };
}
```

## Comandos de Verificación

### Verificación de Tipos
```bash
# Verificar tipos TypeScript
pnpm check

# Build con verificación de tipos
pnpm build

# Verificación en modo watch
pnpm check --watch
```

### Linting y Formato
```bash
# Formatear código
pnpm format

# Verificar formato
pnpm format:check

# Linting (si está configurado)
pnpm lint
```

---

**Recuerda**: El tipado estricto en TypeScript es tu aliado. No lo suprimas, úsalo para crear código más robusto y mantenible.
description:
globs:
alwaysApply: false
---
